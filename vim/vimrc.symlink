set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim' " required

" color/theme stuff
" Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'

" utilities
Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'ryanoasis/vim-devicons'

" Language specific
Plugin 'fatih/vim-go'

call vundle#end()            " required

filetype plugin indent on    " required
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

"""""""""""""""""
" General Setting
""""""""""""""""

" mapleader
let mapleader = ","
let g:mapleader = ","
" following 3 lines make the mapleader key work
set notimeout
set ttimeout
set ttimeoutlen=10

" set color themes (from .vim/colors)
syntax enable
let base16colorspace=256 " Access colors present in 256 colorspace
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors
" e.g. base16-solarized
execute "set background=".$BACKGROUND
execute "colorscheme ".$THEME

" tab control
set smarttab " tab respects 'tabstop', 'shiftwidth and 'softtabstop
set tabstop=4 "set the tab width to 4 spaces
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth

" smarter searching
set ignorecase " case insensitive searching
set smartcase " case sensitive if search term explicilty contains a captital
set incsearch " set incremental search, like modern browsers
set showmatch
set hlsearch " highlight search results
set magic " make searching use normal regex (grep)

" misc
set noerrorbells "no beeps in vim
set hidden " This allows buffers to be hidden if you've modified a buffer
" set number    "show line numbers
" http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
set relativenumber " set relative line numbers
set showcmd   " show me what im typing
set autoindent " keep the indentation on <enter>
set noswapfile   "don't use swapfile
set nobackup     "dont create annoying backup files
set encoding=utf-8 " set default encoding to UTF-8
set clipboard=unnamed " for copy/paste with osx

"""""""""""""
" Keymappings
"""""""""""""

" remap esc
inoremap jk <esc>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" will make navigation of wrapped lines worked as you'd expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" add newlines from normal mode
nnoremap <cr> o<esc>
nnoremap <S-Enter> O<esc>

" toggle paste mode
noremap <leader>p :set paste!<cr>

" clear search highlighting and clear any message already displayed
nnoremap <silent> <space> :nohlsearch<Bar>:echo<cr>

" buffer navigation
nnoremap <leader>bh :bprevious<cr> " move to the previous buffer
nnoremap <leader>bl :bnext<cr> " move to the next buffer
nnoremap <leader>bc :enew<cr> " Open a new empty buffer
nnoremap <leader>bq :bp <BAR> bd #<CR> " close current buffer and move to the previous one (i.e. close 'tab')
" buffer list command/mapping is in CtrlP section

nnoremap <leader>w :w<cr> " fast save
"nnoremap <leader>wq :wq<cr> " fast save and quit
nnoremap <leader>q :q<cr> " fast quit
nnoremap <leader>1 :q!<cr> " fast force quit

" disable arrow keys until I stopped being a noob
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" toggle relative/absolute line numbers
nnoremap <leader>. :call NumberToggle()<cr>

"""""""""""
" Functions
"""""""""""

function! NumberToggle()
  if(&relativenumber == 1)
    set number
	set norelativenumber
  else
    set relativenumber
	set nonumber
  endif
endfunc

"""""""""
" Plugins
"""""""""

" vim-airline
" -----------
set laststatus=2 " plugin won't work without this line	
set noshowmode " hide the default insert/command mode indicator
let g:airline_powerline_fonts=1 
set timeoutlen=20 "gets rid of the pause when leaving insert mode
set guifont=Fura\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h14 " won't work in macvim without this line
"set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h14 " won't work in macvim without this line
" buffers to emulate tabs (with no ctrlp)
let g:airline#extensions#tabline#enabled = 1 " enable the list of buffers at the top of the screen
let g:airline#extensions#tabline#fnamemod = ':t' " show just the filename in the buffer list

" NERDTree
" --------
" http://www.cheatography.com/stepk/cheat-sheets/vim-nerdtree/

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" Toggle NERDTree
" nmap <silent> <C-n><C-t> :NERDTreeToggle<cr>
nnoremap <silent> <leader>t :NERDTreeToggle<cr>
" Focus NERDTree
" nmap <silent> <C-n><C-n> :NERDTree<cr>
" Find current file in NERDTree
" nmap <silent> <C-n><C-f> :NERDTreeFind<cr>
nnoremap <silent> <leader>n :NERDTreeFind<cr>
" remove some files by extension
let NERDTreeIgnore = ['\.js.map$', '\.pyc$']
" start NERDTree automatically when vim starts up
autocmd vimenter * NERDTree
" focus the main window instead of NERDTree when vim starts up
autocmd vimenter * wincmd p 
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" CtrlP
" -----
" CtrlPMRU
nnoremap <silent> <leader>r :CtrlPMRU<cr> 
nnoremap <silent> <leader>bb :CtrlPBuffer<cr> 
let g:ctrlp_map='<leader>f'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

" YCM
" ---
set completeopt-=preview " removes the preview at the top of the vim file

" vim-go 
" ------
"  executes :GoImports and :GoFmt everytime a go file is saved
"  http://vimdoc.sourceforge.net/htmldoc/autocmd.html
"au FileType go autocmd BufWritePre * :GoImports
"au FileType go autocmd BufWritePre * :GoFmt
" add language specific highlighting
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" remove red highlighting
let g:go_highlight_trailing_whitespace_error = 0 
" fixes issue with go files taking a few seconds to load?
let g:go_fmt_command="gofmt" 
